#include <stdio.h>
#include <stdbool.h>

void main() {
    int alloc[10][10], max[10][10], need[10][10];
    int avail[10], work[10], total[10];
    int i, j, k, n, m, count = 0;
    bool finish[10] = {false};

    printf("Enter the number of processes and resources: ");
    scanf("%d%d", &n, &m);

    printf("Enter the claim matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter the allocation matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter the total resources vector:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &total[i]);

    // Calculate available resources
    for (i = 0; i < m; i++) {
        int allocated = 0;
        for (j = 0; j < n; j++) {
            allocated += alloc[j][i];
        }
        avail[i] = total[i] - allocated;
    }

    // Calculate the need matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    // Banker's Algorithm
    while (count < n) {
        bool found = false;
        for (i = 0; i < n; i++) {
            if (!finish[i]) { // If process i is not finished
                bool canAllocate = true;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        canAllocate = false;
                        break;
                    }
                }
                if (canAllocate) {
                    // Allocate resources
                    for (k = 0; k < m; k++) {
                        work[k] = avail[k] + alloc[i][k];
                    }
                    printf("All resources can be allocated to Process %d\n", i + 1);
                    printf("Available resources after allocation: ");
                    for (k = 0; k < m; k++) {
                        avail[k] = work[k];
                        printf("%4d", avail[k]);
                    }
                    printf("\nProcess %d executed: Yes\n", i + 1);
                    finish[i] = true; // Mark process as finished
                    count++;
                    found = true;
                }
            }
        }
        if (!found) {
            // No process can be allocated resources
            printf("\nSystem is in an unsafe state.\n");
            return;
        }
    }

    printf("\nSystem is in a safe state.\n");
}
