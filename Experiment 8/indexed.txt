#include <stdio.h>

int f[50]; // Array to represent allocated blocks
int inde[50]; // Array to hold index blocks

int main() {
    int i, k, j, n, c, p;

    // Initialize the file allocation array
    for (i = 0; i < 50; i++) {
        f[i] = 0; // 0 indicates free block
    }

    do {
        // Prompt for the index block
        printf("Enter index block: ");
        scanf("%d", &p);

        // Check if the index block is free
        if (f[p] == 0) {
            f[p] = 1; // Mark index block as allocated
            printf("Enter number of files on index: ");
            scanf("%d", &n);

            // Check if there are enough free blocks for the files
            for (i = 0; i < n; i++) {
                printf("Enter block number for file %d: ", i + 1);
                scanf("%d", &inde[i]);
                if (f[inde[i]] == 1) {
                    printf("Block %d already allocated.\n", inde[i]);
                    break; // Break if any block is already allocated
                }
            }

            // Allocate the blocks if all are free
            if (i == n) { // All requested blocks are free
                for (j = 0; j < n; j++) {
                    f[inde[j]] = 1; // Mark blocks as allocated
                }
                printf("\nAllocated blocks:\n");
                printf("File indexed at %d:\n", p);
                for (k = 0; k < n; k++) {
                    printf("%d -> %d: %d\n", p, inde[k], f[inde[k]]);
                }
            } else {
                printf("Allocation failed. One or more blocks are already allocated.\n");
            }
        } else {
            printf("Block already allocated. Please choose another index block.\n");
        }

        // Ask user if they want to enter more files
        printf("Enter 1 to enter more files and 0 to exit: ");
        scanf("%d", &c);

    } while (c == 1);

    return 0; // Return 0 to indicate successful completion
}
